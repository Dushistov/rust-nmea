var searchIndex = {};
searchIndex["nmea"] = {"doc":"","items":[[3,"Nmea","nmea","! NMEA parser",null,null],[3,"Satellite","","A Satellite",null,null],[4,"SentenceType","","NMEA sentence type\nGeneral: OSD | \nAutopilot: APA | APB | ASD | \nDecca: DCN | \nD-GPS: MSK \nEcho: DBK | DBS | DBT | \nRadio: FSI | SFI | TLL \nSpeed: VBW | VHW | VLW | \nGPS: ALM | GBS | GGA | GNS | GSA | GSV | \nCourse: DPT | HDG | HDM | HDT | HSC | ROT | VDR | \nLoran-C: GLC | LCD | \nMachine: RPM | \nNavigation: RMA | RMB | RMC | \nOmega: OLN | \nPosition: GLL | DTM \nRadar: RSD | TLL | TTM | \nRudder: RSA | \nTemperature: MTW | \nTransit: GXA | RTF | \nWaypoints and tacks: AAM | BEC | BOD | BWC | BWR | BWW | ROO | RTE | VTG | WCV | WNC | WPL | XDR | XTE | XTR | \nWind: MWV | VPW | VWR | \nDate and Time: GDT | ZDA | ZFO | ZTG |",null,null],[13,"None","","",0,null],[13,"AAM","","",0,null],[13,"ABK","","",0,null],[13,"ACA","","",0,null],[13,"ACK","","",0,null],[13,"ACS","","",0,null],[13,"AIR","","",0,null],[13,"ALM","","",0,null],[13,"ALR","","",0,null],[13,"APA","","",0,null],[13,"APB","","",0,null],[13,"ASD","","",0,null],[13,"BEC","","",0,null],[13,"BOD","","",0,null],[13,"BWC","","",0,null],[13,"BWR","","",0,null],[13,"BWW","","",0,null],[13,"CUR","","",0,null],[13,"DBK","","",0,null],[13,"DBS","","",0,null],[13,"DBT","","",0,null],[13,"DCN","","",0,null],[13,"DPT","","",0,null],[13,"DSC","","",0,null],[13,"DSE","","",0,null],[13,"DSI","","",0,null],[13,"DSR","","",0,null],[13,"DTM","","",0,null],[13,"FSI","","",0,null],[13,"GBS","","",0,null],[13,"GGA","","",0,null],[13,"GLC","","",0,null],[13,"GLL","","",0,null],[13,"GMP","","",0,null],[13,"GNS","","",0,null],[13,"GRS","","",0,null],[13,"GSA","","",0,null],[13,"GST","","",0,null],[13,"GSV","","",0,null],[13,"GTD","","",0,null],[13,"GXA","","",0,null],[13,"HDG","","",0,null],[13,"HDM","","",0,null],[13,"HDT","","",0,null],[13,"HMR","","",0,null],[13,"HMS","","",0,null],[13,"HSC","","",0,null],[13,"HTC","","",0,null],[13,"HTD","","",0,null],[13,"LCD","","",0,null],[13,"LRF","","",0,null],[13,"LRI","","",0,null],[13,"LR1","","",0,null],[13,"LR2","","",0,null],[13,"LR3","","",0,null],[13,"MLA","","",0,null],[13,"MSK","","",0,null],[13,"MSS","","",0,null],[13,"MWD","","",0,null],[13,"MTW","","",0,null],[13,"MWV","","",0,null],[13,"OLN","","",0,null],[13,"OSD","","",0,null],[13,"ROO","","",0,null],[13,"RMA","","",0,null],[13,"RMB","","",0,null],[13,"RMC","","",0,null],[13,"ROT","","",0,null],[13,"RPM","","",0,null],[13,"RSA","","",0,null],[13,"RSD","","",0,null],[13,"RTE","","",0,null],[13,"SFI","","",0,null],[13,"SSD","","",0,null],[13,"STN","","",0,null],[13,"TLB","","",0,null],[13,"TLL","","",0,null],[13,"TRF","","",0,null],[13,"TTM","","",0,null],[13,"TUT","","",0,null],[13,"TXT","","",0,null],[13,"VBW","","",0,null],[13,"VDM","","",0,null],[13,"VDO","","",0,null],[13,"VDR","","",0,null],[13,"VHW","","",0,null],[13,"VLW","","",0,null],[13,"VPW","","",0,null],[13,"VSD","","",0,null],[13,"VTG","","",0,null],[13,"VWR","","",0,null],[13,"WCV","","",0,null],[13,"WNC","","",0,null],[13,"WPL","","",0,null],[13,"XDR","","",0,null],[13,"XTE","","",0,null],[13,"XTR","","",0,null],[13,"ZDA","","",0,null],[13,"ZDL","","",0,null],[13,"ZFO","","",0,null],[13,"ZTG","","",0,null],[4,"FixType","","Fix type",null,null],[13,"Invalid","","",1,null],[13,"Gps","","",1,null],[13,"DGps","","",1,null],[13,"Pps","","",1,null],[13,"Rtk","","",1,null],[13,"FloatRtk","","",1,null],[13,"Estimated","","",1,null],[13,"Manual","","",1,null],[13,"Simulation","","",1,null],[4,"GnssType","","GNSS type",null,null],[13,"Galileo","","",2,null],[13,"Gps","","",2,null],[13,"Glonass","","",2,null],[11,"new","","Constructs a new `Nmea`.\nThis struct parses NMEA sentences, including checksum checks and sentence\nvalidation.",3,{"inputs":[],"output":{"name":"nmea"}}],[11,"fix_timestamp","","Returns fix type",3,{"inputs":[{"name":"nmea"}],"output":{"name":"option"}}],[11,"fix_type","","Returns fix type",3,{"inputs":[{"name":"nmea"}],"output":{"name":"fixtype"}}],[11,"latitude","","Returns last fixed latitude in degress. None if not fixed.",3,{"inputs":[{"name":"nmea"}],"output":{"name":"option"}}],[11,"longitude","","Returns last fixed longitude in degress. None if not fixed.",3,{"inputs":[{"name":"nmea"}],"output":{"name":"option"}}],[11,"altitude","","Returns latitude from last fix. None if not available.",3,{"inputs":[{"name":"nmea"}],"output":{"name":"option"}}],[11,"fix_satellites","","Returns the number of satellites use for fix.",3,{"inputs":[{"name":"nmea"}],"output":{"name":"option"}}],[11,"hdop","","Returns the number fix HDOP",3,{"inputs":[{"name":"nmea"}],"output":{"name":"option"}}],[11,"geoid_height","","Returns the height of geoid above WGS84",3,{"inputs":[{"name":"nmea"}],"output":{"name":"option"}}],[11,"satellites","","Returns the height of geoid above WGS84",3,{"inputs":[{"name":"nmea"}],"output":{"name":"vec"}}],[11,"sentence_type","","Returns the NMEA sentence type.",3,{"inputs":[{"name":"nmea"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parse any NMEA sentence and stores the result. The type of sentence\nis returnd if implemented and valid.",3,{"inputs":[{"name":"nmea"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"nmea"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"nmea"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"satellite"}],"output":{"name":"satellite"}}],[11,"gnss_type","","",4,{"inputs":[{"name":"satellite"}],"output":{"name":"gnsstype"}}],[11,"prn","","",4,{"inputs":[{"name":"satellite"}],"output":{"name":"u32"}}],[11,"elevation","","",4,{"inputs":[{"name":"satellite"}],"output":{"name":"f32"}}],[11,"azimuth","","",4,{"inputs":[{"name":"satellite"}],"output":{"name":"f32"}}],[11,"snr","","",4,{"inputs":[{"name":"satellite"}],"output":{"name":"f32"}}],[11,"fmt","","",4,{"inputs":[{"name":"satellite"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"satellite"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"sentencetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"sentencetype"},{"name":"sentencetype"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"fixtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"fixtype"},{"name":"fixtype"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"fixtype"}],"output":{"name":"fixtype"}}],[11,"eq","","",2,{"inputs":[{"name":"gnsstype"},{"name":"gnsstype"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"clone","","",2,{"inputs":[{"name":"gnsstype"}],"output":{"name":"gnsstype"}}],[11,"fmt","","",2,{"inputs":[{"name":"gnsstype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"gnsstype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"new","regex::re_unicode","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",5,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",5,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",5,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",5,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",5,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",5,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",5,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",5,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",5,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",5,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",5,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",5,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",5,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",5,{"inputs":[{"name":"regex"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",5,{"inputs":[{"name":"regex"}],"output":{"name":"usize"}}],[11,"from_str","","Attempts to parse a string into a regular expression",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"regex"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"fmt","","Shows the original regular expression.",5,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",5,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}]],"paths":[[4,"SentenceType"],[4,"FixType"],[4,"GnssType"],[3,"Nmea"],[3,"Satellite"],[3,"Regex"]]};
initSearch(searchIndex);
